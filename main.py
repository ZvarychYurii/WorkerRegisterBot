import os
import asyncio
import logging
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from google_sheets import GoogleSheetsManager
from validators import validate_age, validate_phone, validate_name, format_phone_variants, sanitize_input
from config import Config
from keep_alive import keep_alive  # –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
keep_alive()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
LANG_CHOICE, NAME, AGE, PHONE, CONFIRM = range(5)

# –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
TEXTS = {
    "ua": {
        "welcome": "üëã –í—ñ—Ç–∞—î–º–æ! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.",
        "name": "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        "age": "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤? (–≤—ñ–¥ 16 –¥–æ 40):",
        "phone": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\nüá∫üá¶ +380661234567 –∞–±–æ 0661234567",
        "invalid_phone": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ü—Ä–∏–∫–ª–∞–¥–∏:\n+380661234567\n0661234567",
        "invalid_age": "‚ùå –í—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 16 –¥–æ 40 —Ä–æ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
        "invalid_name": "‚ùå –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ª–∏—à–µ –±—É–∫–≤–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
        "age_accepted": "‚úÖ –í—ñ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ!",
        "name_accepted": "‚úÖ –ß—É–¥–æ–≤–æ, {name}!",
        "confirm": "üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:\nüë§ –Ü–º'—è: {name}\nüéÇ –í—ñ–∫: {age} —Ä–æ–∫—ñ–≤\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n–í—ñ—Ä–Ω–æ? –ù–∞–¥—ñ—à–ª—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.",
        "confirm_yes": ["—Ç–∞–∫", "yes", "y", "+"],
        "confirm_no": ["–Ω—ñ", "no", "n", "-"],
        "success": "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        "error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        "restart": "üîÑ –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        "confirm_help": "‚ùì –í—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.",
        "cancel": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ. /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.",
        "help": "ü§ñ –ö–æ–º–∞–Ω–¥–∏:\n/start - –ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\n/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏\n/help - –¥–æ–ø–æ–º–æ–≥–∞"
    },
    "ru": {
        "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        "name": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        "age": "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç 16 –¥–æ 40):",
        "phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\nüá∫üá¶ +380661234567 –∏–ª–∏ 0661234567",
        "invalid_phone": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä—ã:\n+380661234567\n0661234567",
        "invalid_age": "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 40 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        "invalid_name": "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        "age_accepted": "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω—è—Ç!",
        "name_accepted": "‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}!",
        "confirm": "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\nüë§ –ò–º—è: {name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n–í–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
        "confirm_yes": ["–¥–∞", "yes", "y", "+"],
        "confirm_no": ["–Ω–µ—Ç", "no", "n", "-"],
        "success": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.",
        "error": "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "restart": "üîÑ –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        "confirm_help": "‚ùì –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
        "cancel": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        "help": "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å\n/help - –ø–æ–º–æ—â—å"
    },
    "en": {
        "welcome": "üëã Welcome! I'll help you register.",
        "name": "Please enter your full name:",
        "age": "How old are you? (16 to 40):",
        "phone": "Enter phone number:\nüá∫üá¶ +380661234567 or 0661234567",
        "invalid_phone": "‚ùå Invalid format.\nExamples:\n+380661234567\n0661234567",
        "invalid_age": "‚ùå Age must be between 16 and 40. Try again:",
        "invalid_name": "‚ùå Name must have at least 2 letters. Try again:",
        "age_accepted": "‚úÖ Age accepted!",
        "name_accepted": "‚úÖ Great, {name}!",
        "confirm": "üìã Check data:\nüë§ Name: {name}\nüéÇ Age: {age}\nüìû Phone: {phone}\n\nCorrect? Send 'yes' or 'no'.",
        "confirm_yes": ["yes", "y", "+"],
        "confirm_no": ["no", "n", "-"],
        "success": "‚úÖ Registration complete! Our HR manager will contact you soon.",
        "error": "‚ùå Error saving data. Try again later.",
        "restart": "üîÑ Let's start over. Enter your full name:",
        "confirm_help": "‚ùì Reply 'yes' or 'no'.",
        "cancel": "‚ùå Cancelled. /start to begin.",
        "help": "ü§ñ Commands:\n/start - start registration\n/cancel - cancel\n/help - help"
    }
}

class WorkerRegistrationBot:
    def __init__(self):
        self.config = Config()
        self.sheets_manager = GoogleSheetsManager()

    def get_text(self, context: ContextTypes.DEFAULT_TYPE, key: str, **kwargs) -> str:
        lang = context.user_data.get('lang', 'ru')
        text = TEXTS[lang].get(key, TEXTS['ru'][key])
        return text.format(**kwargs) if kwargs else text

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        keyboard = [[
            InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='ua'),
            InlineKeyboardButton("üá¨üáß English", callback_data='en'),
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru')
        ]]
        await update.message.reply_text(
            self.get_text(context, "welcome") + "\n\n" + self.get_text(context, "name"),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return LANG_CHOICE

    async def lang_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        lang = query.data
        context.user_data['lang'] = lang
        await query.edit_message_text(
            self.get_text(context, "welcome") + "\n\n" + self.get_text(context, "name")
        )
        return NAME

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        name = sanitize_input(update.message.text)
        if not validate_name(name):
            await update.message.reply_text(self.get_text(context, "invalid_name"))
            return NAME
        context.user_data['name'] = name
        await update.message.reply_text(
            self.get_text(context, "name_accepted", name=name) + "\n\n" + self.get_text(context, "age")
        )
        return AGE

    async def get_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        age = update.message.text.strip()
        if not validate_age(age):
            await update.message.reply_text(self.get_text(context, "invalid_age"))
            return AGE
        context.user_data['age'] = age
        await update.message.reply_text(
            self.get_text(context, "age_accepted") + "\n\n" + self.get_text(context, "phone")
        )
        return PHONE

    async def get_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        phone = update.message.text.strip()
        if not validate_phone(phone):
            await update.message.reply_text(self.get_text(context, "invalid_phone"))
            return PHONE
        variants = format_phone_variants(phone)
        context.user_data['phone'] = variants['international']
        context.user_data['phone_local'] = variants['local']
        await update.message.reply_text(
            self.get_text(context, "confirm", name=context.user_data['name'], age=context.user_data['age'], phone=f"{variants['international']} ({variants['local']})"),
            reply_markup=ReplyKeyboardRemove()
        )
        return CONFIRM

    async def confirm_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        resp = update.message.text.strip().lower()
        lang = context.user_data.get('lang','ru')
        if resp in TEXTS[lang]['confirm_yes']:
            data = context.user_data
            user = update.effective_user
            reg = {'name': data['name'], 'age': data['age'], 'phone': data['phone'], 'telegram_username': user.username or 'N/A', 'telegram_id': str(user.id)}
            if await self.sheets_manager.add_registration(reg):
                await update.message.reply_text(self.get_text(context,"success"))
                for aid in self.config.ADMIN_CHAT_IDS:
                    await context.bot.send_message(aid,
                        f"üÜï –ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:\n–Ü–º'—è: {reg['name']}\n–í—ñ–∫: {reg['age']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {reg['phone']} ({context.user_data['phone_local']})\nTelegram: @{reg['telegram_username']} (ID {reg['telegram_id']})",
                        parse_mode='HTML')
            else:
                await update.message.reply_text(self.get_text(context,"error"))
            context.user_data.clear()
            return ConversationHandler.END
        elif resp in TEXTS[lang]['confirm_no']:
            lang = context.user_data.get('lang')
            context.user_data.clear()
            context.user_data['lang'] = lang
            await update.message.reply_text(self.get_text(context,"restart"))
            return NAME
        else:
            await update.message.reply_text(self.get_text(context,"confirm_help"))
            return CONFIRM

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text(self.get_text(context,"cancel"), reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(self.get_text(context,"help"), parse_mode='HTML')

    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id
        if uid not in self.config.ADMIN_CHAT_IDS:
            return await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        stats = await self.sheets_manager.get_registration_stats()
        await update.message.reply_text(
            f"üìä –í—Å–µ–≥–æ: {stats['total']}, –°–µ–≥–æ–¥–Ω—è: {stats['today']}, –ù–µ–¥–µ–ª—è: {stats['this_week']}, –ú–µ—Å—è—Ü: {stats['this_month']}"
        )

    def setup_handlers(self, app: Application):
        conv = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={LANG_CHOICE:[CallbackQueryHandler(self.lang_choice)], NAME:[MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_name)], AGE:[MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_age)], PHONE:[MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_phone)], CONFIRM:[MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_registration)]},
            fallbacks=[CommandHandler('cancel',self.cancel)]
        )
        app.add_handler(conv)
        app.add_handler(CommandHandler('help', self.help_command))
        app.add_handler(CommandHandler('stats', self.admin_stats))

async def main():
    bot = WorkerRegistrationBot()
    app = Application.builder().token(bot.config.BOT_TOKEN).build()
    bot.setup_handlers(app)
    logger.info("Bot started")
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
