import os
import asyncio
import logging
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from google_sheets import GoogleSheetsManager
from validators import validate_age, validate_phone, validate_name
from config import Config

from keep_alive import keep_alive  # –∏–º–ø–æ—Ä—Ç –≤ –∫–æ–Ω—Ü–µ

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
keep_alive()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
LANG_CHOICE, NAME, AGE, PHONE, CONFIRM = range(5)

# Multi-language text definitions
TEXTS = {
    "ua": {
        "welcome": "üëã –í—ñ—Ç–∞—î–º–æ! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.",
        "name": "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        "age": "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤? (–≤—ñ–¥ 16 –¥–æ 40):",
        "phone": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\nüá∫üá¶ +380661234567",
        "invalid_phone": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ü—Ä–∏–∫–ª–∞–¥–∏:\nüá∫üá¶ +380661234567\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
        "invalid_age": "‚ùå –í—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 16 –¥–æ 40 —Ä–æ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
        "invalid_name": "‚ùå –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ —Ç–∞ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
        "age_accepted": "‚úÖ –í—ñ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ!",
        "name_accepted": "‚úÖ –ß—É–¥–æ–≤–æ, {name}!",
        "confirm": "üìã –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n\nüë§ –Ü–º'—è: {name}\nüéÇ –í—ñ–∫: {age} —Ä–æ–∫—ñ–≤\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ? –ù–∞–¥—ñ—à–ª—ñ—Ç—å '—Ç–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '–Ω—ñ' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è.",
        "confirm_yes": ["—Ç–∞–∫", "yes", "y", "+"],
        "confirm_no": ["–Ω—ñ", "no", "n", "-"],
        "success": "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä.\n\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! üéâ",
        "error": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        "restart": "üîÑ –î–æ–±—Ä–µ, –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        "confirm_help": "‚ùì –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '–Ω—ñ' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:",
        "cancel": "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
        "help": "ü§ñ <b>–ë–æ—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</b>\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n/start - –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\n/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\n/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n<b>–ü—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b>\n1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É\n2Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è\n3Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –≤—ñ–∫ (16-70 —Ä–æ–∫—ñ–≤)\n4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –¥–∞–Ω—ñ\n\n‚ùì –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    },
    "ru": {
        "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.",
        "name": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        "age": "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç 16 –¥–æ 40):",
        "phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\nüá∫üá¶ +380661234567",
        "invalid_phone": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä—ã:\nüá∫üá¶ +380661234567\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        "invalid_age": "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 40 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
        "invalid_name": "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
        "age_accepted": "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω—è—Ç!",
        "name_accepted": "‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}!",
        "confirm": "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüë§ –ò–º—è: {name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.",
        "confirm_yes": ["–¥–∞", "yes", "y", "+"],
        "confirm_no": ["–Ω–µ—Ç", "no", "n", "-"],
        "success": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "restart": "üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        "confirm_help": "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞:",
        "cancel": "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        "help": "ü§ñ <b>–ë–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (16-70 –ª–µ—Ç)\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    },
    "en": {
        "welcome": "üëã Welcome! I'll help you register in our system.",
        "name": "Please enter your full name:",
        "age": "How old are you? (16 to 40 years):",
        "phone": "Enter your phone number:\nüá∫üá¶ +380661234567",
        "invalid_phone": "‚ùå Invalid phone format.\nExamples:\nüá∫üá¶ +380661234567\nTry again:",
        "invalid_age": "‚ùå Age must be a number between 16 and 40. Try again:",
        "invalid_name": "‚ùå Name must contain at least 2 characters and only letters. Try again:",
        "age_accepted": "‚úÖ Age accepted!",
        "name_accepted": "‚úÖ Great, {name}!",
        "confirm": "üìã Please verify your information:\n\nüë§ Name: {name}\nüéÇ Age: {age} years\nüìû Phone: {phone}\n\nIs everything correct? Send 'yes' to confirm or 'no' to re-enter.",
        "confirm_yes": ["yes", "y", "+", "–¥–∞", "—Ç–∞–∫"],
        "confirm_no": ["no", "n", "-", "–Ω–µ—Ç", "–Ω—ñ"],
        "success": "‚úÖ Registration completed successfully!\n\nYour information has been saved. Our HR manager will contact you soon.\n\nThank you for registering! üéâ",
        "error": "‚ùå An error occurred while saving data. Please try again later or contact the administrator.",
        "restart": "üîÑ Alright, let's start over.\nEnter your full name:",
        "confirm_help": "‚ùì Please answer 'yes' to confirm or 'no' to re-enter:",
        "cancel": "‚ùå Registration cancelled.\nIf you change your mind, use /start to begin registration.",
        "help": "ü§ñ <b>Worker Registration Bot</b>\n\n<b>Available commands:</b>\n/start - Start registration\n/cancel - Cancel current registration\n/help - Show this message\n\n<b>Registration process:</b>\n1Ô∏è‚É£ Choose language\n2Ô∏è‚É£ Enter full name\n3Ô∏è‚É£ Specify age (16-70 years)\n4Ô∏è‚É£ Enter phone number\n5Ô∏è‚É£ Confirm information\n\n‚ùì If you have questions, contact the administrator."
    }
}

class WorkerRegistrationBot:
    def __init__(self):
        self.config = Config()
        self.sheets_manager = GoogleSheetsManager()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start the registration process with language selection"""
        user = update.effective_user
        logger.info(f"User {user.id} started registration")
        
        keyboard = [
            [
                InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='ua'),
                InlineKeyboardButton("üá¨üáß English", callback_data='en'),
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=reply_markup
        )
        return LANG_CHOICE
    
    async def lang_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle language selection"""
        query = update.callback_query
        await query.answer()
        
        lang = query.data
        context.user_data['lang'] = lang
        
        welcome_text = TEXTS[lang]["welcome"]
        name_text = TEXTS[lang]["name"]
        
        await query.edit_message_text(f"{welcome_text}\n\n{name_text}")
        return NAME
    
    def get_text(self, context: ContextTypes.DEFAULT_TYPE, key: str, **kwargs) -> str:
        """Get localized text"""
        lang = context.user_data.get('lang', 'ru')  # Default to Russian
        text = TEXTS[lang].get(key, TEXTS['ru'][key])  # Fallback to Russian
        return text.format(**kwargs) if kwargs else text

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Collect user's name"""
        name = update.message.text.strip()
        
        if not validate_name(name):
            error_text = self.get_text(context, "invalid_name")
            await update.message.reply_text(error_text)
            return NAME
        
        context.user_data['name'] = name
        name_accepted_text = self.get_text(context, "name_accepted", name=name)
        age_text = self.get_text(context, "age")
        
        await update.message.reply_text(f"{name_accepted_text}\n\n{age_text}")
        return AGE

    async def get_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Collect user's age"""
        age_text = update.message.text.strip()
        
        if not validate_age(age_text):
            error_text = self.get_text(context, "invalid_age")
            await update.message.reply_text(error_text)
            return AGE
        
        context.user_data['age'] = age_text
        
        age_accepted_text = self.get_text(context, "age_accepted")
        phone_text = self.get_text(context, "phone")
        
        await update.message.reply_text(f"{age_accepted_text}\n\n{phone_text}")
        return PHONE

    async def get_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Collect user's phone number"""
        phone = update.message.text.strip()
        
        if not validate_phone(phone):
            error_text = self.get_text(context, "invalid_phone")
            await update.message.reply_text(error_text)
            return PHONE
        
        context.user_data['phone'] = phone
        
        # Show confirmation
        data = context.user_data
        confirmation_text = self.get_text(context, "confirm", 
                                        name=data['name'], 
                                        age=data['age'], 
                                        phone=data['phone'])
        
        await update.message.reply_text(confirmation_text)
        return CONFIRM

    async def confirm_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Confirm and save registration data"""
        response = update.message.text.strip().lower()
        lang = context.user_data.get('lang', 'ru')
        
        confirm_yes = TEXTS[lang]["confirm_yes"]
        confirm_no = TEXTS[lang]["confirm_no"]
        
        if response in confirm_yes:
            try:
                data = context.user_data
                user = update.effective_user
                
                # Add user metadata
                registration_data = {
                    'name': data['name'],
                    'age': data['age'],
                    'phone': data['phone'],
                    'telegram_username': user.username or 'N/A',
                    'telegram_id': str(user.id),
                    'registration_date': None  # Will be set by sheets manager
                }
                
                # Save to Google Sheets
                success = await self.sheets_manager.add_registration(registration_data)
                
                if success:
                    success_text = self.get_text(context, "success")
                    await update.message.reply_text(success_text, reply_markup=ReplyKeyboardRemove())
                    
                    # Notify admin
                    await self.notify_admin(context, registration_data, user)
                    
                else:
                    error_text = self.get_text(context, "error")
                    await update.message.reply_text(error_text)
                
            except Exception as e:
                logger.error(f"Error during registration confirmation: {e}")
                error_text = self.get_text(context, "error")
                await update.message.reply_text(error_text)
            
            # Clear user data
            context.user_data.clear()
            return ConversationHandler.END
            
        elif response in confirm_no:
            restart_text = self.get_text(context, "restart")
            await update.message.reply_text(restart_text)
            
            # Keep language but clear other data
            saved_lang = context.user_data.get('lang', 'ru')
            context.user_data.clear()
            context.user_data['lang'] = saved_lang
            return NAME
            
        else:
            help_text = self.get_text(context, "confirm_help")
            await update.message.reply_text(help_text)
            return CONFIRM

    async def notify_admin(self, context: ContextTypes.DEFAULT_TYPE, data: dict, user):
    """Send notification to all admins about new registration"""
    if not self.config.ADMIN_CHAT_IDS:
        logger.warning("Admin chat IDs not configured")
        return

    admin_message = (
        "üÜï <b>–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞</b>\n\n"
        f"üë§ <b>–Ü–º‚Äô—è:</b> {data['name']}\n"
        f"üéÇ <b>–í—ñ–∫:</b> {data['age']} —Ä–æ–∫—ñ–≤\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üì± <b>Telegram:</b> @{data['telegram_username']} (ID: {data['telegram_id']})\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> {data.get('registration_date', '–°—å–æ–≥–æ–¥–Ω—ñ')}"
    )

    for admin_id in self.config.ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancel registration process"""
        cancel_text = self.get_text(context, "cancel")
        await update.message.reply_text(cancel_text, reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        help_text = self.get_text(context, "help")
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show registration statistics (admin only)"""
        user_id = update.effective_user.id
        
        if str(user_id) != str(self.config.ADMIN_CHAT_ID):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        try:
            stats = await self.sheets_manager.get_registration_stats()
            
            stats_message = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π</b>\n\n"
                f"üë• <b>–í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b> {stats.get('total', 0)}\n"
                f"üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {stats.get('today', 0)}\n"
                f"üìÖ <b>–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:</b> {stats.get('this_week', 0)}\n"
                f"üìÖ <b>–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b> {stats.get('this_month', 0)}"
            )
            
            await update.message.reply_text(stats_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error getting admin stats: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            )

    def setup_handlers(self, app: Application):
        """Setup all bot handlers"""
        # Conversation handler for registration
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                CommandHandler("register", self.start)
            ],
            states={
                LANG_CHOICE: [CallbackQueryHandler(self.lang_choice)],
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_name)],
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_age)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_phone)],
                CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_registration)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )
        
        # Add handlers
        app.add_handler(conv_handler)
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("stats", self.admin_stats))

def main():
    """Main function to run the bot"""
    try:
        # Initialize bot
        bot = WorkerRegistrationBot()
        
        # Create application
        app = Application.builder().token(bot.config.BOT_TOKEN).build()
        
        # Setup handlers
        bot.setup_handlers(app)
        
        logger.info("Worker Registration Bot is starting...")
        print("ü§ñ Worker Registration Bot is running...")
        
        # Run the bot
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print(f"‚ùå Error starting bot: {e}")

if __name__ == "__main__":
    main()
